package edu.project2;

import org.apache.logging.log4j.LogManager;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.util.Objects;

class MazePrinterTest {

    @Test
    void printMazeToTest() {
        int[][] maze = {
            {14, 6, 5, 12, 6, 5, 12, 6, 5, 12},
            {3, 9, 14, 10, 3, 12, 10, 10, 6, 9},
            {6, 5, 8, 3, 12, 10, 10, 10, 3, 12},
            {10, 7, 9, 6, 9, 11, 3, 1, 13, 10},
            {3, 12, 6, 9, 6, 4, 5, 5, 5, 8},
            {6, 9, 10, 7, 9, 10, 6, 5, 12, 10},
            {2, 12, 3, 5, 12, 3, 9, 6, 9, 11},
            {10, 3, 5, 5, 9, 6, 12, 3, 5, 12},
            {10, 6, 5, 12, 7, 8, 3, 5, 12, 10},
            {3, 9, 7, 1, 5, 9, 7, 5, 1, 9}};
        MazePrinter mazePrinter = new MazePrinter(maze, LogManager.getLogger());
        var actual = mazePrinter.fillStrMaze();

        String[][] excepted = {
            {"██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██",
                "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██"},
            {"██", "  ", "██", "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "  ",
                "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██"},
            {"██", "  ", "██", "██", "  ", "  ", "██", "██", "██", "  ", "  ", "██", "██", "  ", "  ", "██", "██", "██",
                "  ", "  ", "██", "██", "  ", "  ", "██", "██", "██", "  ", "  ", "██"},
            {"██", "  ", "  ", "  ", "  ", "██", "██", "██", "██", "██", "  ", "██", "██", "  ", "  ", "██", "██", "██",
                "██", "  ", "██", "██", "  ", "██", "██", "██", "██", "  ", "  ", "██"},
            {"██", "  ", "  ", "  ", "  ", "██", "██", "  ", "██", "██", "  ", "██", "██", "  ", "  ", "  ", "  ", "██",
                "██", "  ", "██", "██", "  ", "██", "██", "  ", "  ", "  ", "  ", "██"},
            {"██", "██", "██", "██", "██", "██", "██", "  ", "██", "██", "  ", "██", "██", "██", "██", "  ", "  ", "██",
                "██", "  ", "██", "██", "  ", "██", "██", "  ", "  ", "██", "██", "██"},
            {"██", "██", "██", "██", "██", "██", "  ", "  ", "██", "██", "  ", "  ", "██", "██", "██", "██", "  ", "██",
                "██", "  ", "██", "██", "  ", "██", "██", "  ", "  ", "██", "██", "██"},
            {"██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "██", "██", "  ", "██",
                "██", "  ", "██", "██", "  ", "██", "██", "  ", "  ", "  ", "  ", "██"},
            {"██", "  ", "  ", "██", "██", "██", "  ", "  ", "██", "██", "██", "██", "  ", "  ", "██", "██", "  ", "██",
                "██", "  ", "██", "██", "  ", "██", "██", "██", "██", "  ", "  ", "██"},
            {"██", "  ", "██", "██", "██", "██", "  ", "  ", "██", "██", "██", "██", "  ", "  ", "██", "██", "  ", "██",
                "██", "  ", "  ", "  ", "  ", "  ", "██", "██", "██", "██", "  ", "██"},
            {"██", "  ", "██", "██", "  ", "  ", "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "██", "██", "  ", "██",
                "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██", "██", "  ", "██"},
            {"██", "  ", "██", "██", "██", "██", "██", "██", "██", "██", "  ", "  ", "██", "██", "██", "██", "██", "██",
                "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "  ", "██"},
            {"██", "  ", "  ", "██", "██", "██", "██", "██", "██", "  ", "  ", "██", "██", "██", "██", "██", "██", "██",
                "██", "██", "██", "██", "██", "██", "██", "██", "██", "  ", "  ", "██"},
            {"██", "  ", "  ", "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "  ",
                "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██"},
            {"██", "██", "██", "  ", "  ", "██", "██", "  ", "  ", "██", "██", "██", "██", "  ", "  ", "  ", "  ", "  ",
                "██", "██", "██", "██", "██", "██", "██", "██", "██", "  ", "  ", "██"},
            {"██", "██", "██", "  ", "  ", "██", "██", "  ", "██", "██", "██", "██", "  ", "  ", "██", "██", "  ", "██",
                "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "  ", "██"},
            {"██", "  ", "  ", "  ", "  ", "██", "██", "  ", "██", "██", "  ", "  ", "  ", "  ", "██", "██", "  ", "██",
                "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██", "██", "  ", "██"},
            {"██", "  ", "  ", "██", "██", "██", "██", "  ", "██", "██", "██", "██", "██", "██", "██", "██", "  ", "██",
                "██", "  ", "  ", "██", "██", "██", "  ", "  ", "██", "██", "  ", "██"},
            {"██", "  ", "  ", "██", "██", "██", "██", "  ", "  ", "██", "██", "██", "██", "██", "██", "██", "  ", "  ",
                "  ", "  ", "██", "██", "██", "██", "  ", "  ", "██", "██", "  ", "██"},
            {"██", "  ", "  ", "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██", "██", "  ", "  ",
                "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "██", "██", "  ", "██"},
            {"██", "  ", "  ", "  ", "  ", "██", "██", "██", "██", "██", "██", "██", "  ", "  ", "██", "██", "██", "██",
                "██", "██", "██", "██", "  ", "  ", "██", "██", "██", "██", "██", "██"},
            {"██", "  ", "██", "██", "  ", "  ", "██", "██", "██", "██", "██", "██", "  ", "  ", "██", "██", "██", "██",
                "██", "██", "██", "██", "  ", "  ", "██", "██", "██", "██", "██", "██"},
            {"██", "  ", "██", "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██", "██", "  ", "  ",
                "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██"},
            {"██", "  ", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "  ", "  ",
                "  ", "  ", "██", "██", "██", "██", "██", "██", "██", "  ", "  ", "██"},
            {"██", "  ", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "  ", "  ", "██",
                "██", "  ", "  ", "██", "██", "██", "██", "██", "██", "██", "  ", "██"},
            {"██", "  ", "██", "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "██",
                "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██", "██", "  ", "██"},
            {"██", "  ", "██", "██", "  ", "  ", "██", "██", "██", "  ", "  ", "██", "██", "██", "██", "  ", "  ", "██",
                "██", "██", "██", "██", "██", "██", "  ", "  ", "██", "██", "  ", "██"},
            {"██", "  ", "  ", "  ", "  ", "██", "██", "██", "██", "  ", "  ", "  ", "██", "██", "██", "  ", "  ", "██",
                "██", "██", "██", "██", "██", "██", "  ", "  ", "  ", "  ", "  ", "██"},
            {"██", "  ", "  ", "  ", "  ", "██", "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██",
                "██", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "██"},
            {"██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██",
                "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██", "██"}
        };
        Assertions.assertTrue(compareStrMazes(excepted, actual));
    }

    boolean compareStrMazes(String[][] maze1, String[][] maze2) {
        if (maze1.length != maze2.length || maze1[0].length != maze2[0].length) {
            return false;
        }
        for (int i = 0; i < maze1.length; i++) {
            for (int j = 0; j < maze2[0].length; j++) {
                boolean eq = Objects.equals(maze1[i][j], maze2[i][j]);
                if (!eq) {
                    return false;
                }
            }
        }
        return true;
    }

}

